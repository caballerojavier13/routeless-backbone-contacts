= Routeless Backbone.js Contacts 2.0
:max-width: 50em
:caption:

:blogpost-title: Routeless Backbone Contacts 2.0
:blogpost-status: published
:blogpost-doctype: article
:blogpost-posttype: post
:blogpost-categories: Backbone.js, CoffeeScript

//References
:backbone: http://documentcloud.github.com/backbone/[Backbone.js]
:underscore: http://documentcloud.github.com/underscore/[Underscore.js]
:coffeescript: http://jashkenas.github.com/coffee-script/[CoffeeScript]
:single-page-application: http://en.wikipedia.org/wiki/Single-page_application[Single&nbsp;Page&nbsp;Application]
:webstorage: http://en.wikipedia.org/wiki/Web_Storage[Web&nbsp;Storage]
:phonegap: http://www.phonegap.com/[PhoneGap]
:stylus: http://learnboost.github.com/stylus/[Stylus]
:jquery: http://jquery.com/[jQuery]
:mongoose: http://code.google.com/p/mongoose/[Mongoose]
:webstorage-adapter: https://github.com/jeromegn/Backbone.localStorage[Backbone&nbsp;localStorage&nbsp;Adapter]
:github: https://github.com/srackham/routeless-backbone-contacts
:version1: http://srackham.wordpress.com/2011/09/22/routeless-backbone-contacts

*Published*: 2010-10-03 +
*Updated*: 2010-10-25

This post describes a revamped version 2.0 of my {version1}[original
Routeless Backbone Contacts application]. The material covered here
builds on the original post.

. The basic application functionality and the underlying data remains
  the same.
. The new user interface is a single two-pane page with a selectable
  list of contacts on the left and contact details on the right.
. A 'Search box' has been added to incrementally filter the list of
  displayed contacts.
. The application is 100% event driven -- there is no direct coupling
  between the views.
  http://documentcloud.github.com/backbone/#Events[Backbone.js events]
  emitted by the underlying contact data collection ensure the views
  are updated automatically when the state of the underlying data
  changes.

pass::[<!--more-->]


'Routeless Backbone.js Contacts' is a totally client-side CRUD
tutorial application written using {coffeescript}, {stylus},
{backbone} and {jquery} which are a perfect match for writing concise,
readable well structured web applications.

- The source is {github}[on Github]:
  * This release described in this post is at the '2.0' tag.
  * A subsequent release includes
    http://srackham.wordpress.com/2011/10/25/testing-coffeescript-apps-with-selenium/[Selenium
    tests] and is at the '3.0.' tag.

- The contacts data is persisted locally using browser {webstorage}.
- Templates are written using {underscore} templates (included with
  {backbone}).
- Refer to the {version1}[original Routeless Backbone Contacts 1.0
  blog post] for more information.



== User Interface
image::contacts2-screenshot.png[]

The single page user interface combines four
http://documentcloud.github.com/backbone/#View[Backbone.js views]. The
views subscribe to, and are updated by,
http://documentcloud.github.com/backbone/#Events[events] emitted by
the contacts collection ('add', 'remove', 'change', 'reset', 'filter',
'select').

== Models and Collections
=== ContactModel
The same http://documentcloud.github.com/backbone/#Model[model] as
version 1.0.

=== ContactsCollection
The 'ContactsCollection'
http://documentcloud.github.com/backbone/#Collection[collection] has
been enhanced:

. The 'Filter' class provides functions to filter the collection by
  contact name. When the filter criteria changes the collection
  broadcasts a custom 'filter' event to subscribed views.

. The 'Cursor' class provides a cursor object which represents the
  currently selected model in the contacts collection. The cursor
  listens for changes to the collection so that it can automatically
  ensure the cursor points to a valid contact in the filtered
  collection.  When the cursor changes the contacts collection
  broadcasts a custom 'select' event to subscribed views.


== Views
=== RibbonView
image::contacts2-ribbon.png[]

=== StatusView
image::contacts2-status.png[]

=== ListView
image::contacts2-list.png[]

=== DetailView
image::contacts2-detail.png[]


== Browser Compatibility
The markup generated by this tutorial is HTML5 with CSS3, no attempt
has been made to accommodate legacy browsers.

- Was developed and tested on Google Chrome 14.
- Firefox 6 works fine.
- Requires IE9+ for correct CSS styling (though the header gradient
  doesn't work in IE9).
- Requires iOS5+ for the names
  http://davidbcalhoun.com/2011/new-mobile-safari-stuff-in-ios5-position-fixed-overflow-scroll-new-input-type-support-web-workers-ecmascript-5[list
  to scroll].


== Backbone.js Tips
- The use of the 'fat arrow' function definition operator in event
  handlers is significant. In the following example, when 'render' is
  called 'this' will be bound to the callee's 'this' context so the
  reference to '@el' will be correct:
+
----
  @model.bind 'change', @render
  render: =>
      @el.html @template
----

- Don't rely on the execution order of registered events.

- The Model 'change' event bubbles up through related collections.

- It pays to monitor event handler execution during development. If a
  section of code triggers the execution of the same handler multiple
  times this may be symptomatic of a non-optimal design. For example,
  without the 'silent' option the following code would trigger
  multiple collection 'remove' events (the collection 'reset' is
  sufficient to  ensure listener notification):
+
----
contact.destroy {silent: true} for contact in @collection.toArray()
@collection.reset()
----
+
On the other hand, it's not unusual for event handlers to execute
common code which can also result in execution redundancy (for
example, the 'renderCursor' handler is also called by the 'render'
handler in the 'ListView'). In cases like this don't sweat over
eliminating the redundancy unless it impacts performance -- code
clarity is usually preferable to the convoluted and brittle
optimisations generated by a ``fix''.

- When Backbone.js Models and Collections emit built-in events they
  pass associated event information to the event handler arguments.
  The http://documentcloud.github.com/backbone/#FAQ-events[catalog of
  Backbone.js events] documents the event handler arguments. Currently
  undocumented is fact that 'options' arguments passed to event
  triggering methods are passed through to the handlers as the
  trailing argument.  In the following example an object containing a
  custom option 'myOption' will be the third argument passed to the
  'add' event handlers `"add"(model, collection, options)`:
+
----
myCollection.add myModel, {myOption: 'foobar'}
----

- Don't forget that Backbone.js event handlers are passed arguments
  (see previous item).  For example, the Backbone.js Collection
  'reset' event passes the associated collection to the handler in the
  first argument which will cause the following code to fail:
+
----
@_collection.bind 'reset', @set
set: (model=null) =>
    :
----
+
If you assumed that the 'set' handler would be called with no
arguments you would expect 'model' to be set to 'null' -- in fact
'model' is assigned '@_collection'.  The code can be fixed by
introducing an anonymous proxy handler that is bound to 'this' and
called without any arguments:
+
----
@_collection.bind 'reset', => @set()
set: (model=null) ->
    :
----

- Use the
  http://documentcloud.github.com/backbone/#FAQ-events[built-in event]
  argument passing conventions if you have to
  http://documentcloud.github.com/backbone/#Events-trigger[trigger] a
  built-in event programmatically. For example:
+
----
@collection.trigger 'reset', @collection
----

